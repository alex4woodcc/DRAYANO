import { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { supabase } from '@/lib/supabase';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { TypeBadge } from '@/components/pokemon/TypeBadge';
import { LoadingSkeleton } from '@/components/ui/loading-skeleton';
import { ErrorBoundary } from '@/components/ui/error-boundary';
import { RouteEncounter, GameId } from '@/types/database';
import { cn } from '@/lib/utils';

interface EncountersListProps {
  gameId: GameId;
  routeId: string;
}

export function EncountersList({ gameId, routeId }: EncountersListProps) {
  const [selectedMethod, setSelectedMethod] = useState<string | null>(null);

  const { data: encounters, isLoading, error, refetch } = useQuery<RouteEncounter[]>({
    queryKey: ['encounters', gameId, routeId],
    queryFn: async () => {
      const { data, error } = await supabase
        .from('v_route_encounters_full')
        .select('*')
        .eq('game_id', gameId)
        .eq('route_id', routeId)
        .order('sort_index')
        .order('slot_no');

      if (error) throw error;
      return data || [];
    },
    enabled: !!routeId,
  });

  if (!routeId) {
    return (
      <div className="text-center py-12">
        <p className="text-muted-foreground">Select a route to view encounters</p>
      </div>
    );
  }

  if (isLoading) {
    return <EncountersListSkeleton />;
  }

  if (error) {
    return (
      <ErrorBoundary
        error={error}
        onRetry={() => refetch()}
        title="Failed to load encounters"
      />
    );
  }

  if (!encounters?.length) {
    return (
      <div className="text-center py-12">
        <p className="text-muted-foreground">No encounters found for this route</p>
      </div>
    );
  }

  // Get unique methods for filtering
  const methods = Array.from(new Set(encounters.map(e => e.method)));
  
  // Filter encounters by selected method
  const filteredEncounters = selectedMethod
    ? encounters.filter(e => e.method === selectedMethod)
    : encounters;

  const routeName = encounters[0]?.route_name || 'Unknown Route';

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center justify-between">
          <div>
            <CardTitle data-testid="route-title">{routeName} Encounters</CardTitle>
            <p className="text-muted-foreground text-sm">Wild Pok√©mon encounters and rates</p>
          </div>

          {/* Method Filters */}
          <div className="flex space-x-2" data-testid="method-filters">
            <Button
              onClick={() => setSelectedMethod(null)}
              variant={selectedMethod === null ? "default" : "outline"}
              size="sm"
              data-testid="method-all"
            >
              All
            </Button>
            {methods.map((method) => (
              <Button
                key={method}
                onClick={() => setSelectedMethod(method)}
                variant={selectedMethod === method ? "default" : "outline"}
                size="sm"
                data-testid={`method-${method.toLowerCase().replace(/\s+/g, '-')}`}
              >
                {method}
              </Button>
            ))}
          </div>
        </div>
      </CardHeader>

      <CardContent className="p-0">
        {/* Encounters Table */}
        <div className="overflow-x-auto">
          <table className="w-full" data-testid="encounters-table">
            <thead className="bg-muted/30">
              <tr>
                <th className="text-left p-4 text-sm font-medium text-muted-foreground">Pok√©mon</th>
                <th className="text-left p-4 text-sm font-medium text-muted-foreground">Type</th>
                <th className="text-left p-4 text-sm font-medium text-muted-foreground">Level</th>
                <th className="text-left p-4 text-sm font-medium text-muted-foreground">Rate</th>
                <th className="text-left p-4 text-sm font-medium text-muted-foreground">Method</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-border">
              {filteredEncounters.map((encounter, index) => (
                <tr
                  key={`${encounter.forme_id}-${encounter.method}-${index}`}
                  className="hover:bg-muted/20 transition-colors"
                  data-testid={`encounter-${encounter.forme_id}`}
                >
                  <td className="p-4">
                    <div className="flex items-center space-x-3">
                      <div className="w-10 h-10 bg-muted rounded-lg flex items-center justify-center">
                        {encounter.sprite_url ? (
                          <img
                            src={encounter.sprite_url}
                            alt={encounter.forme_label}
                            className="w-8 h-8 object-contain"
                            loading="lazy"
                          />
                        ) : (
                          <span className="text-sm">üêæ</span>
                        )}
                      </div>
                      <span className="font-medium">{encounter.forme_label}</span>
                    </div>
                  </td>
                  <td className="p-4">
                    <div className="flex space-x-1">
                      {encounter.types?.map((type, typeIndex) => (
                        <TypeBadge key={typeIndex} type={type} className="text-xs" />
                      ))}
                    </div>
                  </td>
                  <td className="p-4">
                    <span className="font-mono text-sm">
                      {encounter.min_level === encounter.max_level
                        ? encounter.min_level
                        : `${encounter.min_level}-${encounter.max_level}`}
                    </span>
                  </td>
                  <td className="p-4">
                    <span className="font-mono text-sm">{encounter.encounter_rate}%</span>
                  </td>
                  <td className="p-4">
                    <span className="px-2 py-1 bg-green-500/20 text-green-400 text-xs rounded">
                      {encounter.method}
                    </span>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </CardContent>
    </Card>
  );
}

function EncountersListSkeleton() {
  return (
    <Card>
      <CardHeader>
        <div className="flex items-center justify-between">
          <div>
            <LoadingSkeleton className="h-6 w-48 mb-2" />
            <LoadingSkeleton className="h-4 w-64" />
          </div>
          <div className="flex space-x-2">
            <LoadingSkeleton className="h-8 w-16" />
            <LoadingSkeleton className="h-8 w-20" />
            <LoadingSkeleton className="h-8 w-18" />
          </div>
        </div>
      </CardHeader>
      <CardContent className="p-0">
        <div className="space-y-1">
          <LoadingSkeleton className="h-12 w-full" />
          <LoadingSkeleton count={8} className="h-16 w-full" />
        </div>
      </CardContent>
    </Card>
  );
}
